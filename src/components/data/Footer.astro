---
import Link from '@components/core/Link/Link.astro';
import LinkBox from '@components/core/Link/LinkBox.astro';
import Logo from '@components/core/Logo.astro';
import Tooltip from '@components/core/Tooltip.astro';
import { useLocale } from 'i18n';

const { t, localizePath } = useLocale(Astro.url.pathname);
---

<div class="footer-container">
  <div class="footer-left">
    <div class="footer-links">
      <Tooltip message={t('common.footer.links.rss')}>
        <LinkBox
          href="/rss.xml"
          isLocal={false}
          alt={t('common.footer.links.rss')}
          icon="mdi:rss"
          padding="0.5rem"
          event=`RSS (Footer) - (${Astro.url.pathname})`
        />
      </Tooltip>
      <Tooltip message={t('common.footer.links.tags')}>
        <LinkBox
          href={localizePath('/blog/tags/')}
          alt={t('common.footer.links.tags')}
          icon="mdi:tags"
          padding="0.5rem"
        />
      </Tooltip>
      <Tooltip message={t('common.footer.links.source_code')}>
        <LinkBox
          href="https://github.com/LucJosin/lucasjosino.com"
          isLocal={false}
          alt={t('common.footer.links.source_code')}
          icon="simple-icons:github"
          padding="0.5rem"
        />
      </Tooltip>
    </div>

    <span class="footer-home">
      <Link href={localizePath('/')} alt="Lucas Josino">
        <div class="footer-logo">
          <Logo />
          <span>Lucas Josino</span>
        </div>
      </Link>
    </span>

    <div class="footer-powered">
      <span>© {new Date().getUTCFullYear()}</span>
      •
      {t('common.footer.powered')}
      <Link
        href="https://astro.build/"
        isLocal={false}
        alt="Astro"
        title="Astro"
      />
    </div>
  </div>

  <style>
    .footer-container {
      width: 100%;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: space-around;
      gap: 1rem;
    }

    .footer-left {
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      font-size: 0.89em;
      color: gray;
      gap: 0.2rem;
      text-align: center;
    }

    .footer-links {
      display: flex;
      gap: 1rem;
      margin: 0 0 1rem 0;
    }

    .footer-powered {
      display: flex;
      gap: 0.2rem;
    }

    .footer-logo {
      display: flex;
      flex-direction: column;
      gap: 0.3rem;
    }

    .footer-home {
      color: var(--primary-text-color);
    }
  </style>
</div>

<script>
  async function renderDiagrams(graphs: HTMLCollection) {
    const { default: mermaid } = await import('mermaid');
    mermaid.initialize({
      startOnLoad: false,
      theme:
        document.documentElement.dataset.theme === 'dark' ? 'dark' : 'neutral',
    });

    for (const graph of Array.from(graphs)) {
      const content = graph.getAttribute('data-content');
      if (!content) {
        continue;
      }
      const svg = document.createElement('svg');
      svg.id = 'mermaid-' + Math.round(Math.random() * 100000);
      graph.appendChild(svg);
      mermaid
        .render(svg.id, content.replace(/(%0A)+/g, '\n'))
        .then((result) => {
          graph.innerHTML = result.svg;
        });
    }
  }

  function verifyAndRenderDiagrams() {
    const graphs = document.getElementsByClassName('mermaid');
    if (graphs.length > 0) {
      renderDiagrams(graphs);
    }
  }

  verifyAndRenderDiagrams();

  // @ts-ignore
  window.updateDiagrams = function () {
    const graphs = document.getElementsByClassName('mermaid');
    if (graphs.length > 0) {
      renderDiagrams(graphs);
    }
  };
</script>
