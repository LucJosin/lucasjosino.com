---
import { Icon } from 'astro-icon/components';

interface Props {
  href: string;
  alt: string;
  title?: string;
  isLocal?: boolean;
  gap?: string;
  icon?: string;
  iconSide?: 'left' | 'right';
  iconSize?: string;
  display?: string;
  hasBorderBottom?: boolean;
  animatedIcon?: boolean;
  reverseAnimation?: boolean;
  event?: string;
  accesskey?: string;
  align?: 'center' | 'flex-start';
  class?: string;
}

const {
  href,
  alt,
  title,
  isLocal = true,
  gap = '0.6rem',
  icon,
  iconSide = 'left',
  iconSize = '1.2em',
  display = 'flex',
  hasBorderBottom = true,
  animatedIcon = false,
  reverseAnimation = false,
  event,
  accesskey,
  align = 'center',
  class: classes,
  ...rest
} = Astro.props as Props;

const attr = { 'data-umami-event': event };

const alignStyle = align === 'center' ? 'center' : 'flex-start';
const borderBottom = hasBorderBottom ? 'var(--border-color)' : 'transparent';

const currentGap = reverseAnimation ? '0' : gap;
const animatedGap = animatedIcon
  ? reverseAnimation
    ? '0.6rem'
    : '0.2rem'
  : gap;
const iconColor = animatedIcon ? 'var(--constrast-color)' : 'gray';
---

<a
  href={href}
  title={alt}
  rel={isLocal ? undefined : 'noopener noreferrer'}
  target={isLocal ? undefined : '_blank'}
  class:list={['link-data', classes]}
  accesskey={accesskey}
  {...attr}
  {...rest}
>
  {icon && iconSide === 'left' && <Icon name={icon} />}
  {title ? <span>{title}</span> : <slot />}
  {icon && iconSide === 'right' && <Icon name={icon} />}
</a>

<style
  define:vars={{
    borderBottom,
    currentGap,
    animatedGap,
    iconColor,
    iconSize,
    display,
    alignStyle,
  }}
>
  .link-data {
    border-bottom: var(--border-size) solid transparent;
    transition: all var(--transition-duration);
    cursor: pointer;
    gap: var(--currentGap);
    display: var(--display);
    align-items: var(--alignStyle);
    color: var(--primary-text-color);
    color: inherit;
  }

  .link-data:hover {
    border-bottom: var(--border-size) solid var(--borderBottom);
    gap: var(--animatedGap);
  }

  .link-data:hover > [data-icon] {
    fill: var(--iconColor);
    color: var(--iconColor);
  }

  [data-icon] {
    font-size: var(--iconSize);
  }
</style>
