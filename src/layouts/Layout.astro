---
import I18NHead from '@components/core/I18nHead.astro';
import headConfig from '@constants/head';
import '@styles/global.css';
import { useLocale } from 'i18n';
import { defaultLocale } from 'i18n/config';
import type { LocaleSlug } from 'i18n/types';
import {
  getOpenGraphImage,
  formatOpenGraphFileName,
  cleanOpenGraphUrl,
} from 'open-graph';

export interface Props {
  enableOpenGraph?: boolean;
  title: string;
  description: string;
  image?: string;
  robots?: string;
  shortlink?: string;
  type?: string;
  locale?: string;
  locales?: LocaleSlug[];
  article?: {
    title: string;
    description: string;
    category: string;
    publishedAt: string;
    updatedAt?: string;
    tags: string[];
  };
}

const { locale: pathLocale, t } = useLocale(Astro.url.pathname);

const {
  robots,
  shortlink,
  article,
  enableOpenGraph = true,
  locales,
} = Astro.props as Props;

let { locale, title, image } = Astro.props as Props;
const { description: originalDescription } = Astro.props as Props;

if (!locale) {
  locale = pathLocale;
}

title = article?.title || title + ' | ' + headConfig.name;
const description =
  article?.description || originalDescription + headConfig.endDescription;
const canonical = new URL(Astro.url.pathname, Astro.url.origin);

if (enableOpenGraph && !image) {
  const path = Astro.url.pathname;
  const fileName = formatOpenGraphFileName(path);

  const options = {
    top: t('common.title').toLocaleUpperCase(),
    title,
    description: originalDescription,
    color: '#555555',
    slug: path === '/' ? '' : cleanOpenGraphUrl(path),
  };
  image = await getOpenGraphImage('default', options, fileName);
}

image = Astro.url.origin + image || headConfig.image;
---

<!doctype html>
<html lang={locale || defaultLocale}>
  <head>
    <!-- Metadata -->
    <meta charset="UTF-8" />
    <meta http-equiv="content-language" content={locale || defaultLocale} />
    <meta http-equiv="content-type" content="text/html" />
    <meta name="copyright" content={headConfig.copyright} />
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={headConfig.name} />
    <meta name="tags" content={headConfig.tags} />
    <meta name="keywords" content={headConfig.tags} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content={robots ?? headConfig.robots} />

    <!-- I18N -->
    <I18NHead locales={locales} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:creator" content={headConfig.social} />
    <meta name="twitter:site" content={headConfig.social} />
    <meta name="twitter:domain" content={Astro.site} />
    <meta name="twitter:title" content={title} />
    <meta
      name="twitter:description"
      property="og:description"
      itemprop="description"
      content={description}
    />
    <meta
      property="twitter:image"
      itemprop="image primaryImageOfPage"
      content={image}
    />

    <!-- Open Graph -->
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={title} />
    <meta property="og:site_name" content={headConfig.name} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content={article ? 'article' : 'portfolio'} />
    <meta property="og:image" content={image} />
    <meta property="og:image:alt" content={title} />
    <meta property="og:image:secure_url" content={image} />
    <meta property="og:image:type" content=`image/${image.split('.').pop()}` />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />

    <script is:inline>
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      function getGiscusTheme(theme) {
        return `${window.location.origin}/static/css/giscus_${theme}.css`;
      }

      const theme = (() => {
        if (
          typeof localStorage !== 'undefined' &&
          localStorage.getItem('theme')
        ) {
          return localStorage.getItem('theme');
        }

        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }

        return 'light';
      })();

      document.documentElement.setAttribute('data-theme', theme);
      window.localStorage.setItem('theme', theme);
    </script>

    {
      import.meta.env.PROD && (
        <script
          is:inline
          defer
          src="https://cloud.umami.is/script.js"
          data-website-id="986fb135-7659-4137-9c30-d74a3af505ca"
        />
      )
    }

    {
      article && (
        <>
          <meta
            property="article:published_time"
            content={article?.publishedAt}
          />
          <meta property="article:modified_time" content={article?.updatedAt} />
          <meta property="article:author" content={headConfig.name} />
          <meta property="article:section" content={article?.category} />
          <meta property="article:tag" content={article?.tags.join(' ')} />
        </>
      )
    }

    <!-- Links -->
    {
      shortlink && (
        <link
          rel="shortlink"
          type="text/html"
          href={headConfig.shortLink + shortlink}
        />
      )
    }
    <link rel="canonical" href={canonical} />

    <!-- Icons -->
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href={`${Astro.site}apple-touch-icon.png`}
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href={`${Astro.site}favicon-32x32.png`}
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href={`${Astro.site}favicon-16x16.png`}
    />
    <link
      rel="icon"
      href={`${Astro.site}favicon.ico`}
      media="(prefers-color-scheme:no-preference)"
    />
    <link
      rel="icon"
      href={`${Astro.site}favicon-light.ico`}
      media="(prefers-color-scheme:dark)"
    />
    <link
      rel="icon"
      href={`${Astro.site}favicon.ico`}
      media="(prefers-color-scheme:light)"
    />

    <!-- Astro -->
    <meta name="generator" content={Astro.generator} />

    <!-- Title -->
    <title>{title}</title>
  </head>
  <body>
    <main>
      <slot />
    </main>
    <style>
      /* Scroll */
      :global(::-webkit-scrollbar) {
        height: 4px;
        width: 8px;
        background-color: var(--secondary-color);
      }

      :global(::-webkit-scrollbar-thumb) {
        background-color: var(--contrast-color);
        border-radius: var(--border-radius);
      }

      :global([data-icon]) {
        fill: var(--primary-text-color);
        color: var(--primary-text-color);
        transition: all var(--transition-duration);
      }

      :global(a) {
        color: var(--primary-text-color);
        text-decoration: none;
      }

      :global(p) {
        margin-block-start: 0;
        margin-block-end: 0;
        margin-inline-start: 0;
        margin-inline-end: 0;
      }

      :global(h1) {
        margin-block-start: 0;
        margin-block-end: 0;
        margin-inline-start: 0;
        margin-inline-end: 0;
      }

      :global(kbd) {
        border-radius: 6px;
        font-family:
          Google Sans Mono,
          Inter,
          monospace;
        font-size: 0.9em;
        color: inherit;
        border: 1px solid currentColor;
        text-align: center;
        box-sizing: border-box;
        line-height: 24px;
        padding-inline: 4px;
      }
    </style>
  </body>
</html>
